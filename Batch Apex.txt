global class Main_BatchTransferShares implements Database.Batchable<sObject>, Database.Stateful, Schedulable {
    public static final String jobName = 'myCompany - Process Share Transfers - Monthly Run';

    // Seconds Minutes Hours Day_of_month Month Day_of_week Optional_year
    public static final String DEFAULT_SCHEDULE = '0 30 2 * * ?'; // s mm h d MM W = every day at 2:30 am

    global final Integer BatchSize = 1200;
    global Date startDate;
    global String theQuery;
    global ID batchID;

    //global Map<ID, Investment__c> investmentMap;

    global Main_BatchTransferShares() {
        // default to last month, but on the 15th
        startDate = Date.today().addMonths( -1 );
        startDate = Date.newInstance( startDate.year(), startDate.month(), 15 );
        initialize();
    }

    global Main_BatchTransferShares( Date startDateParam ) {
        startDate = startDateParam;
        initialize();
    }

    global void initialize() {
        system.debug( 'initialize' );

        //investmentMap = new Map<ID, Investment__c>();

        Datetime dt = Datetime.newInstance( startDate.year(), startDate.month(), startDate.day() );
        String sameDayMonthAgoString = dt.format( 'yyyy-MM-dd' );

        theQuery = 'SELECT ID, Effective_Date__c, of_shares_transferred__c, Price_per_share__c '
                + ' , Transfer_From__c, Transfer_To__c, Transfer_Type__c, Transfer_all_Shares__c '
                + ' , No_Approval_Needed__c '
                + ' , Transfer_From__r.ID, Transfer_From__r.Shares_Owned__c '
                + ' , Transfer_To__r.ID, Transfer_To__r.Shares_Owned__c '
                + ' FROM Transfer__c '
                + ' WHERE Effective_Date__c >= ' + sameDayMonthAgoString
                + ' AND of_shares_transferred__c != NULL '
                + ' AND Transfer_From__c != NULL '
                + ' AND Transfer_To__c != NULL '
                + ' AND Status__c = \'Approved\' '
                + ' ORDER BY Transfer_To__c, Transfer_From__c ';

        System.debug( 'theQuery= ' + theQuery );
    }

    global Database.QueryLocator start( Database.BatchableContext bc ) {
        return Database.getQueryLocator( theQuery );
    }

    global void execute( Database.BatchableContext bc, List<SObject> scope ) {
        processRecords( scope );
    }

    global void processRecords( List<SObject> scope ) {
//        List<Transfer__c> transferList = (List<Transfer__c>) scope;
//        system.debug( 'scope= ' + transferList );
//
//        for( Transfer__c aTransfer : transferList ) {
//            Decimal nbrShares = aTransfer.of_shares_transferred__c;
//
//            // if either source/target investment is already in the map, get it from the map
//            // because it is more up to date
//            Investment__c sourceInvestment = investmentMap.get( aTransfer.Transfer_From__c );
//            if( sourceInvestment == null ) {
//                sourceInvestment = aTransfer.Transfer_From__r;
//            }
//
//            Investment__c targetInvestment = investmentMap.get( aTransfer.Transfer_To__c );
//            if( targetInvestment == null ) {
//                targetInvestment = aTransfer.Transfer_To__r;
//            }
//
//            // validate the transfer
//            // don't remove more shares than the investment has
//            //if( sourceInvestment.Shares_Owned__c < nbrShares ) {
//            //    continue;
//            //}
//
//            // handle transferring of all shares
//            if( aTransfer.Transfer_all_Shares__c == true
//                        && ( nbrShares == null || nbrShares == 0 ) ) {
//                nbrShares = sourceInvestment.Shares_Owned__c;
//            }
//
//            // transfer the shares
//            sourceInvestment.Shares_Owned__c = sourceInvestment.Shares_Owned__c - nbrShares;
//            targetInvestment.Shares_Owned__c = targetInvestment.Shares_Owned__c + nbrShares;
//
//            investmentMap.put( sourceInvestment.ID, sourceInvestment );
//            investmentMap.put( targetInvestment.ID, targetInvestment );
//        }

        //update investmentMap.values();
    }

    global void finish( Database.BatchableContext bc ) {
        // TODO: start the next batch apex here

    }

    global void execute( SchedulableContext sc ) {
        batchID = Main_BatchTransferShares.runMe();
    }

    global static ID runMe() {
        Main_BatchTransferShares batchProcess = new Main_BatchTransferShares();
        return Database.executeBatch( batchProcess, batchProcess.BatchSize );
    }

    global static void removeSchedule() {
        // remove existing schedule
        List<CronTrigger> cL = [
                SELECT ID
                FROM CronTrigger
                WHERE CronJobDetail.Name = :jobName
        ];

        if( cL.size() > 0 ) {
            system.abortJob( cL[ 0 ].ID );
        }
    }

    global static void scheduleMe( String schedTime ) {
        removeSchedule();

        // every day at the specified hour and minute
        if( schedTime == null ) {
            schedTime = DEFAULT_SCHEDULE;
        }

        Main_BatchTransferShares batchProcess = new Main_BatchTransferShares();
        System.schedule( jobName, schedTime, batchProcess );
    }

}
