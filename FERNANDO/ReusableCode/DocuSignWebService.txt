
// USAGE:
// // get recipients assigned to an envelope
// Map<String, Map<String, String>> recipientInfoMap =
//          DocuSignWebService.getRecipientsForEnvelope( envelopeID );
//
// // assign a clientUserId to the recipient and update it
// recipientInfoMap.get( 'Manny Pacquiao' ).put( 'clientUserId', 'some ID' );
// Map<String, Map<String, String>> recipientResponseMap =
//          DocuSignWebService.updateRecipientsForEnvelope( envelopeID, recipientInfoMap );
//
// // get the signing URL for the recipient after assigning a clientUserId
// Map<String, String> parameterMap = new Map<String, String> {
//      'userName' => 'Joe O\'Shaughnessy'
//      , 'email' => 'joeoshaughnessy@sharklasers.com'
//      , 'recipientId' => '0146544D-CC82-4BED-BD6E-A5CFD451030C'
//      , 'clientUserId' => '0146544d-cc82-4bed-bd6e-a5cfd451030c'
//      , 'authenticationMethod' => 'email'
//      , 'returnUrl' => 'https://www.docusign.com/devcenter'
// };
// String signURL = DocuSignWebService.getSigningURL( envelopeID, parameterMap );


// Example of error:
//{
//    "errorCode": "USER_AUTHENTICATION_FAILED",
//    "message": "One or both of Username and Password are invalid. Invalid access token"
//}

public without sharing class DocuSignWebService {
    private static final String ENVELOPEID_PREFIX = '"envelopeId": "';
    private static final String URL_PREFIX = '"url": "';
    public static final String ERROR_CODE_PREFIX = '"errorCode": "';
    public static final String ERROR_MSG_PREFIX = '"message": "';
    public static final String DATA_DELIMITER = '"';
    private static final String ACCESS_TOKEN_PREFIX = '"access_token":"';
    private static final String EXPIRATION_PREFIX = '"expires_in":';
    private static final String ACCOUNT_LIST_PREFIX = '"accounts":[';
    private static final String ACCOUNT_ID_PREFIX = '"account_id":"';
    private static final String BASE_URI_PREFIX = '"base_uri":"';
    private static final String SIGNERS_PREFIX = '"signers": [';
    private static final String RECIPIENT_RESULT_LIST_PREFIX = '"recipientUpdateResults": [';
    private static final String LIST_SUFFIX = ']';
    private static final String LIST_PREFIX = '[';

    public static DocuSign_Configuration__mdt DocuSignConfiguration {
        get {
            if( DocuSignConfiguration == null ) {
                DocuSignConfiguration = [
                        SELECT MasterLabel, DeveloperName, DocuSign_User_GUID__c
                                , Integration_Key__c, JWT_Assertion__c, JWT_Claims__c
                                , JWT_Header__c, RSA_Private_Key__c
                                , Show_Headers_on_Debug_Log__c
                        FROM DocuSign_Configuration__mdt
                        WHERE MasterLabel = 'Main DocuSign Configuration'
                        LIMIT 1
                ];
            }

            return DocuSignConfiguration;
        }
        set;
    }

    public static String integrationKey {
        get {
            return DocuSignConfiguration.Integration_Key__c;
        }
        set;
    }
    public static String docuSignUserGUID {
        get {
            return DocuSignConfiguration.DocuSign_User_GUID__c;
        }
        set;
    }

    public static String authorizationEndpoint = 'callout:DocuSign_Authorization_Endpoint';
                                                //'https://account-d.docusign.com/oauth/token';
    public static String userInfoEndpoint = 'callout:DocuSign_UserInfo_Endpoint';
                                            //'https://account-d.docusign.com/oauth/userinfo';
    public static String jwtAssertion {
        get {
            return DocuSignConfiguration.JWT_Assertion__c;
        }
        set;
    }
    public static String accessToken;
    public static Datetime tokenExpirationTime;
    public static String baseUri;
    public static String companyAccountID;

    public static Map<String, String> authorize() {
        // NOTE:  creates a JWT assertion and receives an access token and the token expiration period
        system.debug( 'authorize' );

        // create JWT header and encode in base64
        //{
        //  "alg": "RS256",
        //  "typ": "JWT"
        //}
        String headerEncodedBase64 = EncodingUtil.base64Encode(
                Blob.valueOf( DocuSignConfiguration.JWT_Header__c ) );
        system.debug( 'header= ' + headerEncodedBase64 );

        // create JWT body and encode in base64
        Datetime dt = Datetime.now();
        Long nowEpochDate = dt.getTime() / 1000;    // epoch format = seconds elapsed since 1/1/1970
        Long oneHourEpochDate = nowEpochDate + 3600; // add 1 hour in epoch format

        //{
        //   "iss": "b177a6d1-a750-4a14-b1fd-4f2d68c1ca06",
        //          "sub": "1bca3753-f7a7-4afc-8054-b6be9a4e5b55",
        //          "iat": 1563552445, // nowEpochDate
        //          "exp": 1563556045, // oneHourEpochDate
        //          "aud": "account-d.docusign.com",
        //          "scope": "signature impersonation"
        //    }
        String jwtClaims = DocuSignConfiguration.JWT_Claims__c;
        jwtClaims = jwtClaims.replace( 'integrationKey', integrationKey );
        jwtClaims = jwtClaims.replace( 'docuSignUserGUID', docuSignUserGUID );
        jwtClaims = jwtClaims.replace( 'nowEpochDate', String.valueOf( nowEpochDate ) );
        jwtClaims = jwtClaims.replace( 'oneHourEpochDate', String.valueOf( oneHourEpochDate ) );

        system.debug( 'jwtClaims= ' + jwtClaims );

        //if( useProdCredentials == true ) {
        //    jwtClaims = jwtClaims.replace( 'account-d.docusign.com', 'account.docusign.com' );
        //}

        String bodyEncodedBase64 = EncodingUtil.base64Encode( Blob.valueOf( jwtClaims ) );

        // remove == at the end
        bodyEncodedBase64 = bodyEncodedBase64.substringBeforeLast( '==' ).substringBeforeLast( '=' );

        system.debug( 'bodyEncodedBase64= ' + bodyEncodedBase64 );

        system.debug( 'RSA Private Key= ' + DocuSignConfiguration.RSA_Private_Key__c );

        String RSA256Signature = getRSA256Signature(
                        headerEncodedBase64 + '.' + bodyEncodedBase64
                                    , DocuSignConfiguration.RSA_Private_Key__c );

        // removing weird stuff that doesn't work with DocuSign
        RSA256Signature = RSA256Signature.replace( '/', '_' ).replace( '+', '-' ).substringBeforeLast( '==' );
        system.debug( 'RSA256 signature= ' + RSA256Signature );

        String requestBody = jwtAssertion
                    + headerEncodedBase64 + '.' + bodyEncodedBase64 + '.' + RSA256Signature;
        system.debug( 'requestBody= ' + requestBody );

        Map<String, String> responseMap = getHttpResponseBody(
                                authorizationEndpoint, 'POST'
                                , new Map<String, String> { 'Content-Type' => 'application/x-www-form-urlencoded' }
                                , requestBody );

        system.debug( 'responseMap= ' + responseMap );

        if( responseMap == null ) {
            return responseMap;
        }

        if( responseMap.containsKey( 'Error' ) ) {
            //system.debug( 'responseMap= ' + responseMap );
            return responseMap;
        }

        String responseBody = responseMap.get( 'Body' );
        //system.debug( 'responseBody= ' + responseBody );

        accessToken = responseBody.substringBetween( ACCESS_TOKEN_PREFIX, DATA_DELIMITER );
        system.debug( 'accessToken= ' + accessToken );

        Integer tokenExpirationInSeconds = Integer.valueOf(
                        responseBody.substringBetween( EXPIRATION_PREFIX, '}' ) );

        // anticipate in 2 seconds as a safety margin
        tokenExpirationTime = Datetime.now().addSeconds( tokenExpirationInSeconds - 2 );

        return responseMap;
    }

    public static Map<String, String> getBaseURL() {
        // NOTE:  assumes access token has already been obtained, receives the base URL to
        // use in the subsequent requests
        system.debug( 'getBaseURL' );

        // send access token
        Map<String, String> authorizationHeader = new Map<String, String> {
                'Authorization' => 'Bearer ' + accessToken
        };
        Map<String, String> responseMap = getHttpResponseBody(
                        userInfoEndpoint, 'GET'
                        , authorizationHeader, null );

        system.debug( 'responseMap= ' + responseMap );

        if( responseMap == null ) {
            return responseMap;
        }

        if( responseMap.containsKey( 'Error' ) ) {
            //system.debug( 'responseMap= ' + responseMap );
            return responseMap;
        }

        String responseBody = responseMap.get( 'Body' );

        // parse list of accounts
        String accounts = responseBody.substringBetween( ACCOUNT_LIST_PREFIX, LIST_SUFFIX );
        String[] accountList = accounts.split( '}' );

        // look for the company account and parse the account id and base uri
        for( String anAccount : accountList ) {
            if( anAccount.containsIgnoreCase( 'company' ) ) {
                companyAccountID = anAccount.substringBetween( ACCOUNT_ID_PREFIX, DATA_DELIMITER );
                baseUri = anAccount.substringBetween( BASE_URI_PREFIX, DATA_DELIMITER );
                break;
            }
        }

        // NOTE:  concatenate baseUri with /restapi/v2/accounts/ and companyAccountID to get the next endpoint
        system.debug( 'companyAccountID= ' + companyAccountID );
        system.debug( 'baseUri= ' + baseUri );

        return responseMap;
    }

    public static Boolean tokenExpirationAndBaseURLPresent() {
        // checks if access token is null or about to expire, then reacquire it
        // checks if base URI and account ID are present, if not acquire them
        if( tokenExpirationTime == null || Datetime.now() >= tokenExpirationTime ) {
            Map<String, String> responseMap = authorize();

            if( responseMap == null || responseMap.containsKey( 'Error' ) ) {
                return false;
            }
        }

        // get base URI if needed
        if( baseUri == null || companyAccountID == null ) {
            getBaseURL();
        }

        return true;
    }

    public static Map<String, Map<String, String>> getFailedAuthenticationMap() {
        return new Map<String, Map<String, String>> {
                'Error' => new Map<String, String> {
                        'Error' => 'Authentication Failure'
                }
        };
    }

    public static Map<String, Map<String, String>> getRecipientsForEnvelope( String envelopeID ) {
        // NOTE:  returns a map of field maps indexed by recipient email (one field map per recipient)
        // need to check returning map for entry named 'Error'
        system.debug( 'getRecipientsForEnvelope' );

        // check if access token is null or about to expire, then reacquire it
        // check if base URI and account ID are present, if not acquire them
        if( tokenExpirationAndBaseURLPresent() == false ) {
            return getFailedAuthenticationMap();
        }

        // specify the request URL parameters
        String requestRecipientsURL = baseUri + '/restapi/v2/accounts/' + companyAccountID
                            + '/envelopes/' + envelopeID + '/recipients';

        // send access token
        Map<String, String> authorizationHeader = new Map<String, String> {
                            'Authorization' => 'Bearer ' + accessToken
                            , 'Content-Type' => 'application/json'
        };

        Map<String, String> responseMap = getHttpResponseBody(
                            requestRecipientsURL, 'GET'
                            , authorizationHeader, null );

        if( responseMap.containsKey( 'Error' ) ) {
            Map<String, Map<String, String>> recipientInfoMap = new Map<String, Map<String, String>>();
            recipientInfoMap.put( 'Error', responseMap );
            system.debug( 'recipientInfoMap with Error= ' + recipientInfoMap );
            return recipientInfoMap;
        }

        // parse the recipients
        String responseBody = responseMap.get( 'Body' );

        Map<String, String> recipientMap = new Map<String, String>();

        // extract the list of signers
        String signers = responseBody.replace( '\r\n', '' ).replace( '      ', ' ' )
                                    .substringBetween( SIGNERS_PREFIX, '],' );
        system.debug( 'signers= ' + signers );

        // place signer JSON list into an actual list
        List<Object> signerObjList = (List<Object>) JSON.deserializeUntyped( LIST_PREFIX + signers + LIST_SUFFIX );

        // extract specific fields from the signer list
        Set<String> fieldsToInclude = new Set<String> {
                'name', 'email', 'recipientId', 'recipientIdGuid', 'userId'
                , 'roleName', 'status', 'clientUserId'
        };

        // organize unparsed list of signers into a map of signer data indexed by signer name
        Map<String, Map<String, String>> recipientInfoMap = new Map<String, Map<String, String>>();
        for( Object aSignerObj : signerObjList ){
            // convert the object into a map of fields
            Map<String, Object> signerObjWithSeparateFieldsMap = (Map<String, Object>) aSignerObj;

            // copy and convert signer fields to string
            Map<String, String> aSignerMap = new Map<String, String>();
            for( String aField : fieldsToInclude ) {
                aSignerMap.put( aField, String.valueOf( signerObjWithSeparateFieldsMap.get( aField ) ) );
            }

            // replaced name with email
            recipientInfoMap.put( aSignerMap.get( 'email' ), aSignerMap );
        }

        system.debug( 'recipientInfoMap= ' + recipientInfoMap );

        return recipientInfoMap;
    }

    public static Map<String, Map<String, String>> updateRecipientsForEnvelope( String envelopeID
                                , Map<String, Map<String, String>> recipientInfoByEmailMap ) {
        // NOTE:  updates recipients with the map obtained using getRecipientsForEnvelope()
        // need to check returning map for entry named 'Error'
        system.debug( 'updateRecipientsForEnvelope' );

        // check if access token is null or about to expire, then reacquire it
        // check if base URI and account ID are present, if not acquire them
        if( tokenExpirationAndBaseURLPresent() == false ) {
            return getFailedAuthenticationMap();
        }

        // specify the request URL parameters
        String requestRecipientsURL = baseUri + '/restapi/v2/accounts/' + companyAccountID
                + '/envelopes/' + envelopeID + '/recipients';

        // send access token
        Map<String, String> authorizationHeader = new Map<String, String> {
                'Authorization' => 'Bearer ' + accessToken
                , 'Content-Type' => 'application/json'
        };

        // replaced name with email

        // create body with clientUserIds
        List<String> signerList = new List<String>();
        for( String aSignerEmailKey : recipientInfoByEmailMap.keySet() ) {
            Map<String, String> signerFieldMap = recipientInfoByEmailMap.get( aSignerEmailKey );
            signerList.add( JSON.serialize( signerFieldMap ) );
        }

        // NOTE:  do we care about currentRoutingOrder ?
        String requestBody = '{ "signers": [' + String.join( signerList, ',' )
                                + '], "recipientCount": "' + signerList.size()
                                + '","currentRoutingOrder": "2" }';
        system.debug( 'requestBody= ' + requestBody );

        Map<String, String> responseMap = getHttpResponseBody(
                requestRecipientsURL, 'PUT'
                , authorizationHeader, requestBody );

        if( responseMap.containsKey( 'Error' ) ) {
            Map<String, Map<String, String>> recipientResultMap = new Map<String, Map<String, String>>();
            recipientResultMap.put( 'Error', responseMap );
            system.debug( 'recipientResultMap with Error= ' + recipientResultMap );
            return recipientResultMap;
        }

        // parse the recipient update results
        String responseBody = responseMap.get( 'Body' );
        system.debug( 'responseBody= ' + responseBody );

        String recipientResults = responseBody.substringBetween( RECIPIENT_RESULT_LIST_PREFIX, LIST_SUFFIX );

        // place signer JSON list into an actual list
        List<Object> resultObjList = (List<Object>) JSON.deserializeUntyped(
                                    LIST_PREFIX + recipientResults + LIST_SUFFIX );

        // organize unparsed list of results into a map of results indexed by recipient id
        Map<String, Map<String, String>> recipientResultMap = new Map<String, Map<String, String>>();
        for( Object aResultObj : resultObjList ){
            // convert the object into a map of fields
            Map<String, Object> resultObjWithSeparateFieldsMap = (Map<String, Object>) aResultObj;

            // copy and convert result fields to string
            Map<String, String> aResultMap = new Map<String, String>();
            String recipientId = String.valueOf( resultObjWithSeparateFieldsMap.get( 'recipientId' ) );
            aResultMap.put( 'recipientId', recipientId );

            Map<String, Object> errorDetailObjMap = (Map<String, Object>)
                            resultObjWithSeparateFieldsMap.get( 'errorDetails' );
            aResultMap.put( 'errorCode', String.valueOf( errorDetailObjMap.get( 'errorCode' ) ) );
            aResultMap.put( 'message', String.valueOf( errorDetailObjMap.get( 'message' ) ) );

            recipientResultMap.put( recipientId, aResultMap );
        }

        system.debug( 'recipientResultMap= ' + recipientResultMap );

        return recipientResultMap;
    }

    public static String getSigningURL( String envelopeID, Map<String, String> parameterMap ) {
        // NOTE:  returns the signing URL assuming that the recipient has been set with
        // a clientUserId to make the envelope work with embedded signing
        system.debug( 'getSigningURL' );

        // check if access token is null or about to expire, then reacquire it
        // check if base URI and account ID are present, if not acquire them
        if( tokenExpirationAndBaseURLPresent() == false ) {
            return null;
        }

        // specify the request URL parameters
        String requestSigningURL = baseUri + '/restapi/v2/accounts/' + companyAccountID
                    + '/envelopes/' + envelopeID + '/views/recipient';

        // specify the request body parameters
        //{
        //    "userName": "Joe O'Shaughnessy",
        //    "email": "joeoshaughnessy@sharklasers.com",
        //    "recipientId": "b177a6d1-b750-4b14-a1fd-4f2d68a1ca06",
        //    "clientUserId": "",
        //    "authenticationMethod": "email",
        //    "returnUrl": "https://www.docusign.com/devcenter"
        //}
        List<String> requestBodyList = new List<String>();
        for( String aKey : parameterMap.keySet() ) {
            requestBodyList.add( DATA_DELIMITER + aKey + '":"' + parameterMap.get( aKey ) + DATA_DELIMITER );
        }
        String requestSigningBody = String.join( requestBodyList, ',' );
        requestSigningBody = '{' + requestSigningBody + '}';

        system.debug( 'requestSigningBody= ' + requestSigningBody );

        // send access token
        Map<String, String> authorizationHeader = new Map<String, String> {
                'Authorization' => 'Bearer ' + accessToken
                , 'Content-Type' => 'application/json'
        };

        Map<String, String> responseMap = getHttpResponseBody(
                requestSigningURL, 'POST'
                , authorizationHeader, requestSigningBody );

        if( responseMap.containsKey( 'Error' ) ) {
            String docuSignError = responseMap.get( 'Error' );
            if( docuSignError.containsIgnoreCase( ERROR_CODE_PREFIX ) ) {
                docuSignError = docuSignError.substringBetween( ERROR_CODE_PREFIX, DATA_DELIMITER )
                        + ' - '
                        + docuSignError.substringBetween( ERROR_MSG_PREFIX, DATA_DELIMITER );

            }

            return 'Error:  ' + docuSignError;
        }

        // parse the signing URL
        String responseBody = responseMap.get( 'Body' );
        system.debug( 'responseBody= ' + responseBody );

        String signingURL = responseBody.substringBetween( URL_PREFIX, DATA_DELIMITER );
        system.debug( 'signingURL= ' + signingURL );

        return signingURL;
    }

    //public static String submitDocument( List<Map<String, String>> signerMapList
    //                                , String documentName, String documentBase64 ) {
    //    // NOTE:  submit the document and returns the envelope Id
    //    // the signerMap needs to have email, name, clientUserId, recipientId (nbr)
    //    system.debug( 'submitDocument' );
//
    //    // check if access token is null or about to expire, then reacquire it
    //    // check if base URI and account ID are present, if not acquire them
    //    if( tokenExpirationAndBaseURLPresent() == false ) {
    //        return null;
    //    }
//
    //    // specify the request URL parameters
    //    String requestSigningURL = baseUri + '/restapi/v2/accounts/' + companyAccountID
    //            + '/envelopes';
//
    //    // specify the request body parameters
    //    String signerListJSON = '';
    //    List<String> signerList = new List<String>();
    //    for( Map<String, String> signerMap : signerMapList ) {
    //        List<String> requestBodyList = new List<String>();
    //        for( String aKey : signerMap.keySet() ) {
    //            requestBodyList.add( DATA_DELIMITER + aKey + '":"' + signerMap.get( aKey ) + DATA_DELIMITER );
    //        }
//
    //        String aSignerJSON = String.join( requestBodyList, ',' );
    //        signerList.add( '{ ' + aSignerJSON + ' }' );
    //    }
//
    //    String requestEnvelopeCreationBody = '{ "recipients": { "signers": [ '
    //                        + String.join( signerList, ',' )
    //                        + ' ] }, "emailSubject": "Signature Request on Policy Document", '
    //            + '"documents": [ { "documentId": "1", "name": "' + documentName
    //            + '", "documentBase64": "' + documentBase64 + '" } ], "status": "sent" }';
    //    system.debug( 'requestEnvelopeCreationBody= ' + requestEnvelopeCreationBody );
//
    //    // send access token
    //    Map<String, String> authorizationHeader = new Map<String, String> {
    //            'Authorization' => 'Bearer ' + accessToken
    //            , 'Content-Type' => 'application/json'
    //    };
//
    //    Map<String, String> responseMap = getHttpResponseBody(
    //            requestSigningURL, 'POST'
    //            , authorizationHeader, requestEnvelopeCreationBody );
//
    //    if( responseMap.containsKey( 'Error' ) ) {
    //        String docuSignError = responseMap.get( 'Error' );
    //        docuSignError = docuSignError.substringBetween( ERROR_CODE_PREFIX, DATA_DELIMITER )
    //                + ' - '
    //                + docuSignError.substringBetween( ERROR_MSG_PREFIX, DATA_DELIMITER );
    //        return 'Error:  ' + docuSignError;
    //    }
//
    //    // RESPONSE
    //    // {
    //    //    "envelopeId": "3bc8ac1e-1db2-4938-b5ad-eb3f9d3fecf0",
    //    //    "uri": "/envelopes/3bc8ac1e-1db2-4938-b5ad-eb3f9d3fecf0",
    //    //    "statusDateTime": "2019-07-25T23:41:47.3446051Z",
    //    //    "status": "sent"
    //    //}
//
    //    // parse the envelopeID
    //    String responseBody = responseMap.get( 'Body' );
    //    system.debug( 'responseBody= ' + responseBody );
//
    //    String envelopeID = responseBody.substringBetween( ENVELOPEID_PREFIX, DATA_DELIMITER );
    //    system.debug( 'envelopeID= ' + envelopeID );
//
    //    return envelopeID;
//
    //}

    public static String getRSA256Signature( String dataToEncode, String privateKey ) {
        // create signature and replace characters

        Blob hmacData = Crypto.sign( 'RSA-SHA256', Blob.valueOf( dataToEncode )
                , EncodingUtil.base64Decode( privateKey ) );

        String sig = EncodingUtil.base64Encode( hmacData );

        return sig;
    }

    public static Map<String, String> getHttpResponseBody(
                                    String endpoint, String method
                                    , Map<String, String> requestHeaderMap
                                    , String requestBody ) {
        // NOTE:  returns a map containing keys Status, Body and Error (if applicable)
        HttpResponse res;
        Map<String, String> responseMap = new Map<String, String>();
        try {
            // submit authorization request to DocuSign
            HttpRequest req = new HttpRequest();

            System.debug( 'Callout path= ' + endpoint );
            req.setEndpoint( endpoint );
            req.setMethod( method );

            // JWT
            if( requestBody != null ) {
                req.setBody( requestBody );
            }

            // set headers
            if( requestHeaderMap != null ) {
                for( String aKey : requestHeaderMap.keySet() ) {
                    req.setHeader( aKey, requestHeaderMap.get( aKey ) );
                }
            }

            // send request
            Http h = new Http();
            res = h.send( req );

            //get the list of header names (keys)
            String[] headerKeys = res.getHeaderKeys();

            // store header key-value pairs
            for( String aKey : headerKeys ) {
                if( DocuSignConfiguration.Show_Headers_on_Debug_Log__c == true ) {
                    system.debug( aKey + '= ' + res.getHeader( aKey ) );
                }
                responseMap.put( aKey, res.getHeader( aKey ) );
                //system.debug( aKey + '= ' + res.getHeader( aKey ) );
            }

        } catch( Exception e ) {
            system.debug( e.getMessage() + ' - ' + e.getStackTraceString() );

            responseMap.put( 'Error', e.getMessage() );

            return responseMap;
        }

        String responseStatus = res.getStatus();
        system.debug( 'responseStatus= ' + responseStatus );
        if( responseStatus != 'OK' && responseStatus != 'Created' ) {
            system.debug( 'Error= ' + responseStatus + ' - ' + res.getBody() );

            responseMap.put( 'Error', responseStatus + ' - ' + res.getBody() );

            return responseMap;
        }

        responseMap.put( 'Status', responseStatus );
        responseMap.put( 'Body', res.getBody() );

        return responseMap;
    }

    /*
    public static String getEnvelopeCorrectionViewURL( String envelopeID ) {
        // NOTE:  returns the signing URL assuming that the recipient has been set with
        // a clientUserId to make the envelope work with embedded signing
        system.debug( 'getEnvelopeCorrectionViewURL' );

        // check if access token is null or about to expire, then reacquire it
        // check if base URI and account ID are present, if not acquire them
        if( tokenExpirationAndBaseURLPresent() == false ) {
            return null;
        }

        // specify the request URL parameters
        String requestSigningURL = baseUri + '/restapi/v2/accounts/' + companyAccountID
                + '/envelopes/' + envelopeID + '/views/recipient';

        // specify the request body parameters
        //{
        //    "userName": "Joe O'Shaughnessy",
        //    "email": "joeoshaughnessy@sharklasers.com",
        //    "recipientId": "b177a6d1-b750-4b14-a1fd-4f2d68a1ca06",
        //    "clientUserId": "",
        //    "authenticationMethod": "email",
        //    "returnUrl": "https://www.docusign.com/devcenter"
        //}
        //List<String> requestBodyList = new List<String>();
        //for( String aKey : parameterMap.keySet() ) {
        //    requestBodyList.add( DATA_DELIMITER + aKey + '":"' + parameterMap.get( aKey ) + DATA_DELIMITER );
        //}
        //String requestSigningBody = String.join( requestBodyList, ',' );
        //requestSigningBody = '{' + requestSigningBody + '}';

        // send access token
        Map<String, String> authorizationHeader = new Map<String, String> {
                'Authorization' => 'Bearer ' + accessToken
                , 'Content-Type' => 'application/json'
        };

        Map<String, String> responseMap = getHttpResponseBody(
                requestSigningURL, 'POST'
                , authorizationHeader, requestSigningBody );

        if( responseMap.containsKey( 'Error' ) ) {
            String docuSignError = responseMap.get( 'Error' );
            if( docuSignError.containsIgnoreCase( ERROR_CODE_PREFIX ) ) {
                docuSignError = docuSignError.substringBetween( ERROR_CODE_PREFIX, MSG_SUFFIX )
                        + ' - '
                        + docuSignError.substringBetween( ERROR_MSG_PREFIX, MSG_SUFFIX );

            }

            return 'Error:  ' + docuSignError;
        }

        // parse the signing URL
        String responseBody = responseMap.get( 'Body' );
        system.debug( 'responseBody= ' + responseBody );

        String signingURL = responseBody.substringBetween( URL_PREFIX, DATA_DELIMITER );
        system.debug( 'signingURL= ' + signingURL );

        return signingURL;

    }
    */
}