ORIGINAL VERSION:

/**
 * Reduces one or more LDS errors into a string[] of error messages.
 * @param {FetchResponse|FetchResponse[]} errors
 * @return {String[]} Error messages
 */
const reduceErrors = (errors) => {
  if (!Array.isArray(errors)) {
    errors = [errors];
  }

  return (
    errors
      // Remove null/undefined items
      .filter(error => !!error)
      // Extract an error message
      .map(error => {
        // UI API read errors
        if (Array.isArray(error.body)) {
          return error.body.map(e => e.message);
        }
        // FIELD_VALIDATION or trigger.addError errors
        else if (
          error.body
          && error.body.enhancedErrorType
          && error.body.enhancedErrorType.toLowerCase() === 'recorderror'
          && error.body.output
          && error.body.output.errors.length
          && error.body.output.errors[0].errorCode === 'FIELD_CUSTOM_VALIDATION_EXCEPTION'
        ) {
          return error.body.output.errors[0].message;
        }
        // UI API DML, Apex and network errors
        else if (error.body && typeof error.body.message === 'string') {
          return error.body.message;
        }
        // JS errors
        else if (typeof error.message === 'string') {
          return error.message;
        }
        // Unknown error shape so try HTTP status text
        return error.statusText;
      })
      // Flatten
      .reduce((prev, curr) => prev.concat(curr), [])
      // Remove empty strings
      .filter(message => !!message)
  );
}

OPTIMIZED VERSION:

// for working with array of errors
export function reduceErrors(errors) {
    if (!Array.isArray(errors)) {
        errors = [errors];
    }

    return (
        errors
            // Remove null/undefined items
            .filter(error => !!error)
            // Extract an error message
            .map(error => parseError(error))
            .flat()
            // Remove empty strings
            .filter(message => !!message)
    );
}

// for working with a single error
export function parseError(error) {
    // JS errors
    if (typeof error.message === 'string') {
        return error.message;
    }
    // UI API DML, Apex and network errors
    if (error.body && typeof error.body.message === 'string') {
        return error.body.message;
    }

    // UI API read errors
    if (Array.isArray(error.body)) {
        return error.body.map(e => e.message);
    }

    // FIELD VALIDATION, FIELD, and trigger.addError
    if (
        error.body &&
        error.body.enhancedErrorType &&
        error.body.enhancedErrorType.toLowerCase() === 'recorderror' &&
        error.body.output
    ) {
        let output = error.body.output,
            firstError = '';
        if (
            output.errors.length &&
            output.errors[0].errorCode === 'FIELD_CUSTOM_VALIDATION_EXCEPTION'
        ) {
            firstError = output.errors[0].message;
        }
        if (!output.errors.length && output.fieldErrors) {
            // It's in a really weird format...
            firstError = output.fieldErrors[Object.keys(output.fieldErrors)[0]][0].message;
        }
        return firstError;
    }
}
